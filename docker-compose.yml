version: "3.9"
services:
  userservice:
    build:
      context: .
      dockerfile: ./backend/services/UserService/Dockerfile
    ports:
      - "5000:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      - sqlserver

  bookingservice:
    build:
      context: .
      dockerfile: ./backend/services/BookingService/Dockerfile
    ports:
      - "5001:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      - sqlserver

  servicemanagementservice:
    build:
      context: .
      dockerfile: ./backend/services/ServiceManagementService/Dockerfile
    ports:
      - "5002:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      - sqlserver

  paymentservice:
    build:
      context: .
      dockerfile: ./backend/services/PaymentService/Dockerfile
    ports:
      - "5003:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      - sqlserver

  notificationservice:
    build:
      context: .
      dockerfile: ./backend/services/NotificationService/Dockerfile
    ports:
      - "5004:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      - sqlserver

  reportingservice:
    build:
      context: .
      dockerfile: ./backend/services/ReportingService/Dockerfile
    ports:
      - "5005:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      - sqlserver

  sqlserver:
    image: "mcr.microsoft.com/mssql/server:2019-latest"
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=MySuperSecretPassword123!
      - MSSQL_PID=Developer
    volumes:
      - sqlserver_data:/var/opt/mssql
      - ./database-scripts:/database-scripts
    command: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "$$SA_PASSWORD" -i /database-scripts/setup.sql

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus-config.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - sqlserver

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.6
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.6
    ports:
      - "5044:5044"
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.6
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    ports:
      - "4317:4317"
      - "55680:55680"
    volumes:
      - ./tracing/otel-collector-config.yml:/etc/otel-collector-config.yml
    depends_on:
      - jaeger

  apm-server:
    image: docker.elastic.co/apm/apm-server:7.17.6
    ports:
      - "8200:8200"
    environment:
      - APM_SERVER_HOST=0.0.0.0:8200
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
  cadvisor:
    image: gcr.io/google-containers/cadvisor:latest
    ports:
      - "8080:8080"
  alertmanager:
    image: prom/alertmanager:latest
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    depends_on:
      - prometheus

volumes:
  sqlserver_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

  
 