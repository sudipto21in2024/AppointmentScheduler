{
  "task_id": "BE-XXX-05",
  "title": "Implement System Admin Tenant Management API",
  "description": "Implement API endpoints for System Admin to manage all tenants (GET all, CREATE, UPDATE, DELETE, Suspend/Activate).",
  "priority": "HIGH",
  "complexity": 5,
  "effort_estimate": {
    "hours": 40,
    "story_points": 13
  },
  "status": "NOT_STARTED",
  "progress": 0,
  "started_date": "",
  "completed_date": "",
  "blocked_reason": "",
  "completion_evidence": [],
  "business_logic": {
    "user_stories": [
      "As a system administrator, I want to onboard new tenants to the platform.",
      "As a system administrator, I want to view and manage all existing tenants.",
      "As a system administrator, I want to activate, deactivate, or suspend tenant accounts."
    ],
    "business_rules": [
      "Only SuperAdmin users can access these endpoints.",
      "Tenant creation requires unique subdomain and admin email.",
      "Tenant status changes (activate/deactivate/suspend) must be auditable.",
      "Soft delete for tenants to preserve historical data."
    ],
    "edge_cases": [
      "Handling duplicate tenant creation attempts.",
      "Managing tenant status changes and their impact on associated users/services.",
      "Ensuring data integrity during tenant deletion (soft delete)."
    ]
  },
  "dependencies": {
    "blocking_tasks": [],
    "blocked_by": [],
    "external_dependencies": [
      "Tenant Management Service",
      "User Management Service"
    ]
  },
  "acceptance_criteria": [
    "API endpoints for tenant management are implemented and functional:",
    "  - `GET /system-admin/tenants` (list all tenants)",
    "  - `POST /system-admin/tenants` (create new tenant)",
    "  - `PUT /system-admin/tenants/{id}` (update tenant details)",
    "  - `DELETE /system-admin/tenants/{id}` (soft delete tenant)",
    "  - `PUT /system-admin/tenants/{id}/status` (change status to active/inactive/suspended)",
    "Proper authorization checks ensure only SuperAdmins can access these endpoints.",
    "Tenant data is validated during creation and update.",
    "Appropriate success and error responses are returned."
  ],
  "assigned_team": "Backend",
  "required_skills": [
    "C#",
    "ASP.NET Core",
    "Entity Framework Core",
    "API Design",
    "Authorization"
  ],
  "related_files": {
    "will_create": [
      "backend/services/TenantManagementService/Controllers/SystemAdminTenantController.cs",
      "backend/services/TenantManagementService/Services/ISystemAdminTenantService.cs",
      "backend/services/TenantManagementService/Services/SystemAdminTenantService.cs",
      "backend/services/TenantManagementService/Requests/CreateTenantRequest.cs",
      "backend/services/TenantManagementService/Requests/UpdateTenantRequest.cs",
      "backend/services/TenantManagementService/Requests/UpdateTenantStatusRequest.cs"
    ],
    "will_modify": [
      "docs/API/OpenAPI/tenant-openapi.yaml"
    ],
    "dependencies": [
      "docs/BusinessRequirements/BRD.mmd",
      "docs/knowledgebase/UiFlow/SystemAdmin_TenantManagement_Flow.md"
    ]
  },
  "entities": {
    "primary": ["Tenant"],
    "related": ["User"]
  },
  "api_information": {
    "endpoints": [
      {
        "method": "GET",
        "path": "/system-admin/tenants",
        "description": "List all tenants for System Admin."
      },
      {
        "method": "POST",
        "path": "/system-admin/tenants",
        "description": "Create a new tenant by System Admin."
      },
      {
        "method": "PUT",
        "path": "/system-admin/tenants/{id}",
        "description": "Update tenant details by System Admin."
      },
      {
        "method": "DELETE",
        "path": "/system-admin/tenants/{id}",
        "description": "Soft delete a tenant by System Admin."
      },
      {
        "method": "PUT",
        "path": "/system-admin/tenants/{id}/status",
        "description": "Change tenant status (active/inactive/suspended) by System Admin."
      }
    ],
    "data_contracts": "docs/API/OpenAPI/tenant-openapi.yaml"
  },
  "test_requirements": {
    "unit_tests": [
      "Test tenant creation with valid/invalid data.",
      "Test tenant update for various fields.",
      "Test tenant status changes (activate/deactivate/suspend).",
      "Test tenant soft deletion.",
      "Test unauthorized access attempts."
    ],
    "integration_tests": [
      "End-to-end tenant management workflow with database interactions."
    ],
    "e2e_tests": []
  },
  "blocking_information": {
    "is_blocked": false,
    "blocking_tasks": [],
    "can_start_date": ""
  },
  "additional_context": {
    "technical_notes": "Ensure tenant operations are atomic and auditable. Implement robust authorization checks for SuperAdmin role. Handle unique constraints for subdomain and admin email. Consider event publishing for tenant status changes.",
    "design_references": "docs/BusinessRequirements/BRD.mmd, docs/knowledgebase/UiFlow/SystemAdmin_TenantManagement_Flow.md",
    "security_considerations": "Strictly enforce SuperAdmin access. Validate all input data. Log all tenant management actions for audit purposes."
  },
  "implementation_guidance": {
    "method_signatures": [],
    "implementation_logic": [],
    "file_structure": [],
    "dependencies": [],
    "error_handling": [],
    "testing_guidance": []
  },
  "completion_criteria": {
    "required_subtasks": [],
    "optional_subtasks": [],
    "minimum_completion_percentage": 100,
    "required_deliverables": [
      "backend/services/TenantManagementService/Controllers/SystemAdminTenantController.cs",
      "backend/services/TenantManagementService/Services/ISystemAdminTenantService.cs",
      "backend/services/TenantManagementService/Services/SystemAdminTenantService.cs"
    ]
  },
  "subtasks": []
}